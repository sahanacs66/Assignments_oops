//
//  main.cpp
//  Assignment4
//
//  Created by sahana cs on 3/25/18.
//  Copyright Â© 2018 sahana cs. All rights reserved.
//

#include <iostream>
#include <stdlib.h>
#include <string>
using namespace std;

template <class T> class ThreeD{
public:
    T ht;
    T wid;
    T dep;
    ThreeD() {ht = wid = dep = 0; }
    ThreeD(T i){ht= wid = dep = i;}
    ThreeD(T a,T b ,T c){ ht = a, wid = b; dep = c; }
    template <class U> friend ostream & operator<<(ostream &stream, const ThreeD<U> &t1);
    template <class U> bool  operator==(const ThreeD<U> &t1){
        if( ht == t1.ht && wid == t1.wid && dep == t1.dep)
        return true;
        else
        return false;
    }
};

template <class U> ostream & operator<<(ostream &stream, const ThreeD<U> &t1){
    stream << "( " << t1.ht << ", " << t1.wid << ", " << t1.dep << " ) ";
    return stream;
}
template <class T> class node{
public:
    T value;
    node<T> *next;
    node<T> *prev;
    node<T> () { next = prev = nullptr; }
    node<T> (T v){value = v ; next = prev = nullptr; }
};

template <class T> class linked_list{
public:
    node<T> *head;
    node<T> *tail;
    int size;
    linked_list<T> (){ head = tail = nullptr; size =0; }
    ~linked_list<T>();
    linked_list<T>(const linked_list<T> &L1);
    void operator=(linked_list<T> &L1);
    void push_front(T v);
    template <class U> friend ostream & operator<<(ostream &stream , const linked_list<U> &L1);
    template <class U> bool operator==(const linked_list<U> &L1){
        node<U> *p = L1.head;
        node<U> *q = head;
        while(p != nullptr && q!= nullptr){
            if(q->value == p->value){
                q = q->next;
                p = p->next;
            }
            else
            {
                return false;
            }
        }
        if(p == nullptr && q == nullptr)
        return true;
        else
        return false;
    }
};
template<class T> linked_list<T>:: ~linked_list<T>(){
    while (head != nullptr) {
        node<T> *p = head->next;
        delete head;
        head = p;
    }
    tail = nullptr;
}

template<class T> void linked_list<T>::operator=(linked_list<T> &L1){
    while (head != nullptr) {
        node<T> *p = head->next;
        delete head;
        head = p;
    }
    tail = nullptr;
    
    node<T> *p = L1.head;
    size = L1.size;
    while(p != nullptr){
        node<T> * p1 = new node<T>;
        p1->next = head;
        if(head == nullptr){
            tail = p1;
            head = p1;
        }
        else{
            head->prev = p1;
            head = p1;
        }
        p = p->next;
    }
    
    p = L1.head;
    node<T> *p2 = head;
    while (p != nullptr) {
        p2->value = p->value;
        p = p->next;
        p2 = p2->next;
    }
    
}
template<class T> linked_list<T>::linked_list(const linked_list<T> &L1){
    this->head = nullptr;
    this->tail = nullptr;
    node<T> *p = L1.head;
    size = L1.size;
    while(p != nullptr){
        node<T> * p1 = new node<T>;
        p1->next = head;
        if(head == nullptr){
            tail = p1;
            head = p1;
        }
        else{
            head->prev = p1;
            head = p1;
        }
        p = p->next;
    }
   
    p = L1.head;
    node<T> *p2 = head;
    while (p != nullptr) {
        p2->value = p->value;
        p = p->next;
        p2 = p2->next;
    }
    
}

template<class T> void linked_list<T>:: push_front(T v){
    node<T> *p = new node<T> (v);
    if(head == nullptr && tail == nullptr){
        head = p;
        tail = p;
        size++;
        return;
    }
    if(head == tail){
        head = p ;
        head->next = tail;
        tail->prev = head;
        size++;
        return;
    }
    if(head != tail){
        p->next = head;
        head->prev = p ;
        head = p ;
        size++;
        return;
    }
}

template <class U>  ostream & operator<<(ostream &stream , const linked_list<U> &L1){
    node<U> *p  = L1.head;
    while (p != nullptr) {
        stream << p->value << " " ;
        p = p->next;
    }
    return stream;
}

template <class X> class item{
public:
    X value;
    item<X> *next;
    item<X> *previous;
    item<X> (X v){value = v; next = nullptr; previous = nullptr;}
};

template <class X> class bag {
public:
    item<X> *last;
    item<X> *first;
    int num_items;
    int size() { return num_items; }
    bag() {last = first = nullptr; num_items = 0; }
    ~bag();
    bag<X>(const bag<X> &B);
    void operator=(bag<X> &B);
    void push_back(X v);
    void push_front(X v);
    void pop_front();
    void pop_back();
    X &operator[] (int i);
    X front(){
        return first->value;
    }
    X back(){
        return last->value;
    }
    void clear();
    item<X> * find(X x);
    void erase(item<X> *p);
    void erase(int i);
    template <class U> friend ostream & operator<<(ostream &stream , const bag<U> &b);
};

template<class X> X & bag<X>::operator[](int i){
    int count = 0 ;
    item<X> *p = first;
    while (p !=nullptr) {
        if(count == i){
            break;
        }else{
            p = p->next;
            count++;
        }
    }
    return p->value;
}

template <class X> bag<X>::~bag<X>(){
    while (first != nullptr) {
        item<X> *p = first->next;
        delete first;
        first = p;
    }
    last = nullptr;
}

template <class X> bag<X>::bag(const bag<X> &B){
    this->first = nullptr;
    this->last = nullptr;
    item<X> *p = B.first;
    num_items = B.num_items;
    while(p != nullptr){
        item<X> * p1 = new item<X>;
        p1->next = first;
        if(first == nullptr){
            first = p1;
            last = p1;
        }
        else{
            first->previous = p1;
            first = p1;
        }
        p = p->next;
    }
    
    p = B.first;
    item<X> *p2 = first;
    while (p != nullptr) {
        p2->value = p->value;
        p = p->next;
        p2 = p2->next;
    }
}

template <class X> void bag<X>::operator=(bag<X> &B){
    while (first != nullptr) {
        item<X> *p = first->next;
        delete first;
        first = p;
    }
    last = nullptr;
    
    item<X> *p = B.first;
    num_items = B.num_items;
    while(p != nullptr){
        item<X> * p1 = new item<X>;
        p1->next = first;
        if(first == nullptr){
            first = p1;
            last = p1;
        }
        else{
            first->previous = p1;
            first = p1;
        }
        p = p->next;
    }
    
    p = B.first;
    item<X> *p2 = first;
    while (p != nullptr) {
        p2->value = p->value;
        p = p->next;
        p2 = p2->next;
    }
}

template <class X> void bag<X>::erase(item<X> *p){
    if(p->value == first->value){
        item<X> *q = first ;
        first->next->previous = nullptr;
        first = first->next;
        delete q;
        return;
    }
    else if(p->value == last->value){
        item<X> *q = last;
        last->previous->next = nullptr;
        last = last->previous;
        delete q;
        return;
    }
    else{
        item<X> *q = first->next;
        item<X> *r = first;
        while(q != nullptr){
            if(p->value == q->value){
                r->next = p->next;
                p->next->previous = r;
                delete p;
                q = r->next;
                return;
            }
            else{
                q = q->next;
                r = r->next;
            }
        }
    }
}

template <class X> void bag<X>:: erase(int i){
    int count = 0;
    item<X> *p = first;
    while (p != nullptr) {
        if(count == i ){
            erase(find(p->value));
            return;
        }
        else{
            p = p->next;
            count++;
        }
    }
}

template <class X> void bag<X>::clear(){
    item<X> *p = first;
    while (p!=nullptr) {
        first = first->next;
        delete p;
        num_items--;
        p = first;
    }
}
template <class X> void bag<X>::push_back(X v){
    item<X> *p = new item<X> (v);
    if(first == nullptr && last == nullptr){
        first = p;
        last = p;
        num_items++;
        return;
        
    }
    else{
        last->next = p;
        p->previous = last;
        last = p;
        num_items++;
        return;
    }
}

template <class X> void bag<X>::push_front(X v){
    item<X> *p = new item<X> (v);
    if(first == nullptr && last == nullptr){
        first = p;
        last = p;
        num_items++;
        return;
    }
    else{
        p->next = first;
        first->previous = p;
        first = p;
        num_items++;
        return;
    }
}

template <class X> void bag<X>:: pop_front(){
    item<X> *p = first;
    first = first->next;
    first->previous = nullptr;
    num_items--;
    delete p;
}

template <class X> void bag<X>:: pop_back(){
    item<X> *p = last;
    last = last->previous;
    last->next = nullptr;
    num_items--;
    delete p;
}

template <class X> item<X> * bag<X>::find(X x){
    item<X> * p = first;
    while (p != nullptr) {
        if(p->value == x){
            return p;
        }
        p = p->next;
    }
    return nullptr;
}


template <class U> ostream & operator<<(ostream &stream,const bag<U> &b){
    item<U> *p = b.first;
    while (p != nullptr) {
        stream << p->value << " ";
        p = p->next;
    }
    return stream;
}

int main() {
    bag<double> bag_d;
    bag_d.push_back(5.5);
    bag_d.push_back(6.6);
    bag_d.push_front(4.4);
    bag_d.push_front(3.3);
    bag_d.pop_front();
    bag_d.pop_back();
    cout << bag_d;
    cout << endl;
    
    bag<int> bag_i;
    bag_i.push_back(5);
    bag_i.push_back(6);
    bag_i.push_front(4);
    bag_i.push_front(3);
    bag_i.pop_front();
    bag_i.pop_back();
    cout << bag_i;
    cout << endl;
    
    ThreeD<int> td3(3), td4(4), td5(5), td6(6), td7(100,200,300);
    bag<ThreeD<int>> bag_3D;
    bag_3D.push_back(td5);
    bag_3D.push_back(td6);
    bag_3D.push_front(td4);
    bag_3D.push_front(td3);
    bag_3D.pop_front();
    bag_3D.pop_back();
    cout << bag_3D;
    cout <<"\nfront = " << bag_3D.front() << " back = " << bag_3D.back();
    cout <<"\n" << bag_3D[0] << " " << bag_3D[1] << "\n";
    bag_3D[1] = td7;
    cout << "\n" << bag_3D[0] << " "<< bag_3D[1] << "\n";
    bag_3D.clear();
    cout<<bag_3D;
    cout << "\nsize = " << bag_3D.size();
    
    
    linked_list<string>ls_1;
    ls_1.push_front("David");
    ls_1.push_front("John");
    ls_1.push_front("Pat");
    ls_1.push_front("Ben");
    ls_1.push_front("Jeff");
    cout<< endl;
    cout << ls_1 << endl;
    
    linked_list<string>ls_2;
    ls_2.push_front("Wendy");
    ls_2.push_front("Mary");
    ls_2.push_front("Nancy");
    ls_2.push_front("Jennifer");
    cout << endl ;
    cout << ls_2 << endl;
    
    bag<linked_list<string>> bag_string;
    
    bag_string.push_back(ls_1);
    
    bag_string.push_back(ls_2);
    
    cout << bag_string;
    cout << endl;
    cout << bag_string[1]<<endl;
    
    ThreeD<double> t10(3.2,7.4,8.9), t11(5.6,7.7,2.987), t12(4.6,7.5,3.1416), t13(55.6, 66.8, 333.45);
    linked_list<ThreeD<double>> LTD1;
    LTD1.push_front(t10);
    
    LTD1.push_front(t11);
    linked_list<ThreeD<double>> LTD2;
    LTD2.push_front(t13);
    LTD2.push_front(t12);
    LTD2.push_front(t10);
    LTD2.push_front(t11);
    
    bag<linked_list<ThreeD<double>>> BLTD;
    BLTD.push_back(LTD1);
    BLTD.push_back(LTD2);
    cout << endl;
    cout << BLTD <<endl;
    
    item<linked_list<ThreeD<double>>> * p2;
    p2 = BLTD.find(LTD1);
    BLTD.erase(p2);
    cout << BLTD << endl;
    BLTD.push_back(LTD1);
    cout<< BLTD << endl;
    BLTD.erase(0);
    cout << BLTD << endl;
    
    
    getchar();
    getchar();
    
    
   
}
